openapi: 3.1.0
info:
  title: New Spa
  description: |-
    Specification for New Spa Application based on OpenAPI 3.1 specification.  
  contact:
    email: josue270193@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Github
  url: http://github.com/josue270193
servers:
  - url: http://localhost:8080/api
tags:
  - name: task
    description: Operations about task from user
  - name: user
    description: Operations about user
paths:
  /task:
    get:
      tags:
        - task
      summary: Get all tasks
      description: Get all tasks
      operationId: getTask
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      security:
        - new_spa_auth_jwt:

    put:
      tags:
        - task
      summary: Update an existing task
      description: Update an existing task by id
      operationId: updateTask
      requestBody:
        description: Update an existent task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '422':
          description: Validation exception
      security:
        - new_spa_auth_jwt:

    post:
      tags:
        - task
      summary: Add a new task
      description: Add a new task
      operationId: addTask
      requestBody:
        description: Create a new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - new_spa_auth_jwt:
  
  /task/{taskId}:
    get:
      tags:
        - task
      summary: Find task by ID
      description: Returns a single task
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
      security:
        - new_spa_auth_jwt:

    delete:
      tags:
        - task
      summary: Deletes a task
      description: delete a task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: Task id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid task value
      security:
        - new_spa_auth_jwt:

  /user/login:
    post:
      tags:
        - user
      summary: Login user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Obtain a token from the user logged
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied

  /user/register:
    post:
      tags:
        - user
      summary: Create a new user from request
      description: ''
      operationId: registerUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation exception

components:
  schemas:
    Task:
      type: object
      required:
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
          examples: [ 10 ]
        name:
          type: string
          examples: [ task1 ]
        status:
          type: object
          description: the status of the task
          $ref: '#/components/schemas/Status'
      xml:
        name: task
    Status:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [ 10 ]
        name:
          type: string
          examples: [ ACTIVE, INACTIVE ]
        entity:
          type: string
          examples: [ USER, TASK ]
      xml:
        name: status
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          examples: [ josue270193 ]
        password:
          type: string
          format: password
          examples: [ '12345' ]
      xml:
        name: userLogin
    UserRegister:
      type: object
      required:
        - username
        - password
        - name
        - email
      properties:
        username:
          type: string
          examples: [ test ]
        password:
          type: string
          format: password
          examples: [ test ]
        name:
          type: string
          examples: [ test_name ]
        email:
          type: string
          format: email
          examples: [ test@gmail.com ]
      xml:
        name: userRegister
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [ 10 ]
        username:
          type: string
          examples: [ test ]
        password:
          type: string
          examples: [ test ]
        name:
          type: string
          examples: [ test_name ]
        email:
          type: string
          examples: [ test@gmail.com ]
        status:
          type: object
          description: the status of the user
          $ref: '#/components/schemas/Status'
      xml:
        name: user
    ApiResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    new_spa_auth_jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
